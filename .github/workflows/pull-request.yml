name: Pull Request CI

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests
          fail_ci_if_error: false

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    environment: integration
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        ports:
          - 54322:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      BASE_URL: ${{ secrets.BASE_URL }}
      API_URL: ${{ secrets.API_URL }}
      HEADLESS: true
      SLOW_MO: 0
      TIMEOUT: 30000
      BROWSER: chromium
      TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      ADMIN_USER_EMAIL: ${{ secrets.ADMIN_USER_EMAIL }}
      ADMIN_USER_PASSWORD: ${{ secrets.ADMIN_USER_PASSWORD }}
      INACTIVE_USER_EMAIL: ${{ secrets.INACTIVE_USER_EMAIL }}
      INACTIVE_USER_PASSWORD: ${{ secrets.INACTIVE_USER_PASSWORD }}
      LIBRARY_USER_EMAIL: ${{ secrets.LIBRARY_USER_EMAIL }}
      LIBRARY_USER_PASSWORD: ${{ secrets.LIBRARY_USER_PASSWORD }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      REPORT_PATH: ./reports
      SCREENSHOT_PATH: ./screenshots
      # Database connection for local testing
      DATABASE_URL: postgresql://postgres:${{ secrets.SUPABASE_DB_PASSWORD }}@localhost:54322/postgres
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install main dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}

      - name: Start Next.js application
        run: |
          echo "Starting Next.js application..."
          npm start > app.log 2>&1 &
          APP_PID=$!
          echo "Application started with PID: $APP_PID"
          echo $APP_PID > app.pid
          sleep 5
          echo "Application log after 5 seconds:"
          cat app.log
        env:
          PORT: 3000
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for database to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          timeout 60 bash -c 'until pg_isready -h localhost -p 54322 -U postgres; do sleep 2; done'

      - name: Wait for application to be ready
        run: |
          echo "Checking if application process is running..."
          if [ -f app.pid ]; then
            APP_PID=$(cat app.pid)
            if ps -p $APP_PID > /dev/null; then
              echo "Application process is running (PID: $APP_PID)"
            else
              echo "Application process died. Checking logs..."
              cat app.log
              exit 1
            fi
          fi
          
          echo "Waiting for application to respond on port 3000..."
          timeout 120 bash -c '
            until curl -f http://localhost:3000; do
              echo "Waiting for application to start..."
              sleep 5
              # Check if the process is still running
              if [ -f app.pid ]; then
                APP_PID=$(cat app.pid)
                if ! ps -p $APP_PID > /dev/null; then
                  echo "Application process died. Checking logs..."
                  cat app.log
                  exit 1
                fi
              fi
            done
          '
          
          echo "Application is ready! Final log check:"
          cat app.log

      - name: Create test user
        run: node scripts/create-test-user.js
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Install E2E dependencies
        run: cd apps/booklo-e2e && npm ci

      - name: Install Playwright browsers
        run: cd apps/booklo-e2e && npx playwright install chromium firefox webkit

      - name: Run E2E tests
        run: npm run test:e2e:headless

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            apps/booklo-e2e/reports/
            apps/booklo-e2e/screenshots/
            apps/booklo-e2e/videos/
          retention-days: 7

  status-comment:
    name: Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, e2e-tests]
    if: always() && github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
      - name: Comment PR Status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const lintStatus = '${{ needs.lint.result }}';
            const unitTestsStatus = '${{ needs.unit-tests.result }}';
            const e2eTestsStatus = '${{ needs.e2e-tests.result }}';

            const statusEmoji = {
              'success': '‚úÖ',
              'failure': '‚ùå',
              'cancelled': '‚èπÔ∏è',
              'skipped': '‚è≠Ô∏è'
            };

            const overallStatus = [lintStatus, unitTestsStatus, e2eTestsStatus].every(status => status === 'success') ? 'success' : 'failure';

            const comment = `## üîç Pull Request Check Results

            ### Job Status Summary
            - **Lint**: ${statusEmoji[lintStatus] || '‚ùì'} ${lintStatus}
            - **Unit Tests**: ${statusEmoji[unitTestsStatus] || '‚ùì'} ${unitTestsStatus}
            - **E2E Tests**: ${statusEmoji[e2eTestsStatus] || '‚ùì'} ${e2eTestsStatus}

            ### Overall Status: ${statusEmoji[overallStatus] || '‚ùì'} ${overallStatus === 'success' ? 'All checks passed!' : 'Some checks failed'}

            ---
            üìä **Branch**: \`${pr.head.ref}\`
            üîó **Commit**: \`${pr.head.sha.substring(0, 7)}\`
            ‚è∞ **Time**: ${new Date().toLocaleString()}`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('üîç Pull Request Check Results')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            } 